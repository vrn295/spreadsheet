import axios from "axios";
import Head from "next/head";
import { useEffect, useState } from "react";
import { Cell } from "../src/components/Cell/Cell";
import { Row } from "../src/components/Row/Row";
import { mockData } from "../src/config";
import styles from "../styles/Home.module.scss";

export default function Home() {
  const [currentColor, setcurrentColor] = useState("");
  const [colorData, setcolorData] = useState<any[]>([]);
  const [selectedCell, setselectedCell] = useState("");

  const [multipleCell, setmultipleCell] = useState<string[]>([]);

  const [mergedCells, setmergedCells] = useState<string[]>([]);
  const [biggerCell, setbiggerCell] = useState<string[]>([]);

  const handleColorChange = (e: any) => {
    setcurrentColor(e.target.value);
  };

  const resetState = () => {
    setcurrentColor("");
  };

  useEffect(() => {
    if (currentColor && selectedCell) {
      const leftColorData = colorData.filter(
        (item: any) => selectedCell !== item.id
      );
      setcolorData(() => [
        ...leftColorData,
        {
          id: selectedCell,
          color: currentColor,
        },
      ]);
    }
  }, [currentColor]);

  const handleCellClick = (id: string | number, key: string, e: any) => {
    e.stopPropagation();
    if (e.ctrlKey || e.metaKey) {
      setmultipleCell((prev) => [...prev, `${id}-${key}`]);
    } else {
      setselectedCell(`${id}-${key}`);
      setmultipleCell([]);
    }
  };

  const handleMergeCell = () => {
    setmergedCells((prev) => [...prev, multipleCell[1]]);
    setbiggerCell((prev) => [...prev, multipleCell[0]]);
  };

  console.log("multipleCell", multipleCell);
  console.log("mergedCells", mergedCells);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <header>
        <Row>
          {Object.entries(mockData[0]).map(
            ([key]) => key !== "id" && <Cell data={key.toUpperCase()} id={}  />
          )}
        </Row>
      </header> */}
      <main className={styles.main}>
        {mockData.map((item) => (
          <Row key={item.id}>
            {Object.entries(item).map(
              ([key, value], index) =>
                key !== "id" &&
                !mergedCells.includes(`${item.id}-${key}`) && (
                  <Cell
                    data={value}
                    valueBy={key}
                    id={item.id}
                    key={index}
                    handleCellClick={handleCellClick}
                    resetState={resetState}
                    colorData={colorData}
                    isBiggerCell={biggerCell.includes(`${item.id}-${key}`)}
                  />
                )
            )}
          </Row>
        ))}
      </main>

      <aside>
        <input type="color" onChange={handleColorChange} />
      </aside>

      <button onClick={handleMergeCell}>MERGE</button>
    </>
  );
}
